---
export const prerender = true;

import Layout from "../../layouts/Layout.astro";
import { getProducts } from "../../utils/contentful";
const leftIcon = "/icons/leftIcon.png";
const rightIcon = "/icons/rightIcon.png";

export async function getStaticPaths() {
  const products = await getProducts();
  return products.map((product) => ({
    params: { slug: product.slug },
    props: { product },
  }));
}

const { product } = Astro.props ?? {};
if (!product || typeof product !== 'object') {
  return Astro.redirect("/404");
}

product.price = typeof product.price === 'number' || typeof product.price === 'string' ? product.price : '0';
product.price = typeof product.price === 'number' ? product.price : parseFloat(product.price) || 0;
product.description = product.description || "No description available.";
product.images = Array.isArray(product.images) ? product.images : [];
---

<Layout title={typeof product.title === 'string' ? product.title : 'Untitled'}>
  <div class="container mx-auto px-6 pt-32 pb-16 mt-24">
    <div class="mb-6">
      <a href="/shop" class="bg-[#4e3d34] text-[#eadfcb] px-4 py-2 rounded-md hover:bg-[#3a2b23] transition inline-block">
        ← Return to Shop
      </a>
    </div>

    <div class="flex flex-col md:flex-row items-start md:items-center gap-10">
      <div class="w-full md:w-1/2 relative flex flex-col items-center">
        <div class="relative flex items-center justify-center w-full">
          <button id="prevImage" class="absolute left-[-50px] md:left-[-20px] top-1/2 transform -translate-y-1/2 opacity-80 hover:opacity-100 transition hidden">
            <img src={leftIcon} alt="Previous" class="w-10 h-10" />
          </button>

          <img id="image" class="w-full max-w-sm object-cover rounded-lg" src={Array.isArray(product.images) && typeof product.images[0] === 'string' ? product.images[0] : ""} alt={typeof product.title === 'string' ? product.title : 'Untitled'} />

          <button id="nextImage" class="absolute right-[-50px] md:right-[-20px] top-1/2 transform -translate-y-1/2 opacity-80 hover:opacity-100 transition hidden">
            <img src={rightIcon} alt="Next" class="w-10 h-10" />
          </button>
        </div>

        {product.images.length > 1 && (
          <div class="flex justify-center gap-2 mt-4">
            {product.images.map((img, index) => (
              <button class="w-14 h-14 border rounded-lg hover:border-[#4e3d34]" data-index={index}>
                <img class="w-full h-full object-cover rounded-lg" src={img} alt={`Thumbnail ${index+1}`} />
              </button>
            ))}
          </div>
        )}
      </div>

      <div class="w-full md:w-1/2 text-left">
        <h1 class="text-3xl font-bold text-[#4e3d34]">{product.title}</h1>
        <p class="text-xl text-[#4e3d34] font-semibold mt-2">${typeof product.price === 'number' ? product.price.toFixed(2) : product.price}</p>

        {Array.isArray(product.variants) && product.variants.length > 0 && (
          <div class="mt-4">
            <label class="block font-semibold text-[#4e3d34] mb-2">Select Variant:</label>
            <select id="variantSelector" class="w-full p-2 border rounded-md text-[#4e3d34]">
              {product.variants.map((variant, index) => (
                <option value={index}>{variant.title} — ${variant.price}</option>
              ))}
            </select>
          </div>
        )}

        <button 
          id="addToCartBtn"
          class={`mt-4 px-6 py-3 rounded-md font-semibold transition 
            ${product.inStock 
              ? "bg-[#4e3d34] text-[#eadfcb] hover:bg-[#3a2b23]" 
              : "bg-[#b7a89f] text-[#4e3d34] italic cursor-not-allowed"}`} 
          disabled={!product.inStock}
        >
          {product.inStock ? "Add to Cart" : <em>Sold Out</em>}
        </button>
      </div>
    </div>

    <div class="mt-16 p-6 bg-orange-300 text-[#4e3d34] text-lg rounded-lg">
      <p>{product.description}</p>
    </div>
    <div id="product-data" class="hidden">{JSON.stringify(product)}</div>
  </div>
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const productData = JSON.parse(document.getElementById("product-data")?.textContent || "{}");

    const imageElement = document.getElementById("image");
    const prevButton = document.getElementById("prevImage");
    const nextButton = document.getElementById("nextImage");

    let currentIndex = 0;
    const images = Array.isArray(productData.images) ? productData.images : [];

    function updateImage(index) {
      if (index >= 0 && index < images.length) {
        currentIndex = index;
        if (imageElement) imageElement.src = images[currentIndex];
        updateButtons();
      }
    }

    function updateButtons() {
      prevButton?.classList.toggle("hidden", currentIndex === 0);
      nextButton?.classList.toggle("hidden", currentIndex === images.length - 1);
    }

    prevButton?.addEventListener("click", () => updateImage(currentIndex - 1));
    nextButton?.addEventListener("click", () => updateImage(currentIndex + 1));

    document.querySelectorAll('[data-index]').forEach(button => {
      button.addEventListener('click', event => {
        const index = parseInt(button.getAttribute('data-index') || '0');
        updateImage(index);
      });
    });

    updateButtons();

    const addToCartBtn = document.getElementById("addToCartBtn");
    if (addToCartBtn) {
      addToCartBtn.addEventListener("click", () => {
        const cart = JSON.parse(localStorage.getItem("cart") || "[]");
        const variantSelector = document.getElementById("variantSelector");
        let selectedVariant = null;

        if (variantSelector) {
          const index = parseInt(variantSelector.value);
          selectedVariant = productData.variants?.[index];
        }

        cart.push({
          title: productData.title,
          slug: productData.slug,
          price: selectedVariant?.price || productData.price,
          image: productData.images?.[0] || "",
          variant: selectedVariant?.title || null
        });

        localStorage.setItem("cart", JSON.stringify(cart));
        const bubble = document.getElementById("cart-bubble");
        if (bubble) bubble.textContent = cart.length.toString();
      });
    }
  });
</script>
